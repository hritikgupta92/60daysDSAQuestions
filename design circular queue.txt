class MyCircularQueue {
public:
    int front,rear;
    int *Q;
    int size;
        int capacity;
    MyCircularQueue(int k) {
        front=0;
        rear=-1;
        Q = (int *)malloc(sizeof(int) * k);
        capacity=k;
        size=0;
    }
    
    bool enQueue(int value) {
     if(size==capacity)
         return false;
        rear=((rear+1)%capacity);
        Q[rear]=value;
        size++;
        return true;
    }
    
    bool deQueue() {
        if(size==0)
            return false;
        
            front=(front+1)%capacity;
            size--;
        return true;
    }
    
    int Front() {
        if(size==0){
            return -1;
        }
        else return Q[front];
    }
    
    int Rear() {
        if(size==0){
            return -1;
        }
        else return Q[rear];
    }
    
    bool isEmpty() {
        if(size==0)
            return true;
        else
            return false;
    }
    
    bool isFull() {
         if(size==capacity)
        return true;
        else
            return false;
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */