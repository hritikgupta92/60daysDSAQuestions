#include <bits/stdc++.h>
using namespace std;
void interleave(queue<int>&q){
 stack<int>s;
 int half=q.size()/2;
/* 11 12 13 14 15 16 17 18 19 20*/
 /*transfered the half elements of queue 
 into stack
  
 */
 for(int i=0;i<half;i++){
   s.push(q.front());
   q.pop();
 }
 /*push all the elements from stack to queue*/
 while(!s.empty()){
   q.push(s.top());
   s.pop();
 }

 /* pushed the half elements of queue into that queue itself and then simply deleted them from the front*/
 for(int i=0;i<half;i++){
   q.push(q.front());
   q.pop();
 }
 //Again pushed half of the elements of queue into stack
 for(int i=0;i<half;i++){
   s.push(q.front());
   q.pop();
 }
 /*Now here comes the thing, simply first we are pushing the stack element into the end of the queue and then we push the same queue's front
 this looks like this
 16 17 18 19 20 11 16 
    17 18 19 20 11 16 12 17
       18 19 20 11 16 12 17 13 18
          19 20 11 16 12 17 13 18 14 19
             20 11 16 12 17 13 18 14 19 15 20
             final- 11 16 12 17 13 18 14 19 15 20 
 */
 while(!s.empty()){
   q.push(s.top());
   s.pop();
   q.push(q.front());
   q.pop();
 }
}
int main(){
 queue<int> q;
    q.push(11);
    q.push(12);
    q.push(13);
    q.push(14);
    q.push(15);
    q.push(16);
    q.push(17);
    q.push(18);
    q.push(19);
    q.push(20);
    interleave(q);
    int length = q.size();
    for (int i = 0; i < length; i++) {
        cout << q.front() << " ";
        q.pop();
    }
    return 0;
}